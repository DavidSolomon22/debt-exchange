import { Injectable } from '@nestjs/common';
import { PaginateResult, PaginateOptions } from 'mongoose';
import { AuctionCreateDto, BidCreateDto } from '../dtos';
import { IAuctionCreate, IBidCreate } from '../interfaces';
import { AuctionRepository } from '../repositories';
import { Auction } from '../schemas';
import { Bid } from '../schemas/subschemas/bid.schema';

@Injectable()
export class AuctionService {
  constructor(private auctionRepository: AuctionRepository) {}

  async createAuction(
    auctionCreateDto: AuctionCreateDto,
    auctionFounder: string,
  ): Promise<Auction> {
    const socketAuctionId = 'some autogenerated id';
    const auction: IAuctionCreate = {
      socketAuctionId,
      auctionFounder,
      ...auctionCreateDto,
    };
    return this.auctionRepository.createAuction(auction);
  }

  async createBid(
    auctionId: string,
    bidCreateDto: BidCreateDto,
    bidder: string,
  ): Promise<Bid[]> {
    const bidTimestamp = new Date();
    const bid: IBidCreate = {
      bidder,
      bidTimestamp,
      ...bidCreateDto,
    };
    return this.auctionRepository.createBid(auctionId, bid);
  }

  async getPaginatedAuctions(
    options: PaginateOptions = {},
    filterParams: any = {},
  ): Promise<PaginateResult<Auction>> {
    return this.auctionRepository.getPaginatedAuctions(options);
  }

  async getAuction(
    id: string,
    options: PaginateOptions = {},
  ): Promise<Auction> {
    return this.auctionRepository.getAuction(id, options);
  }

  async getAuctionBids(auctionId: string): Promise<Bid[]> {
    const auction = await this.auctionRepository.getAuctionBids(auctionId);
    return auction?.bidHistory ?? null;
  }

  async deleteAuction(id: string): Promise<Auction> {
    return this.auctionRepository.deleteAuction(id);
  }
}
