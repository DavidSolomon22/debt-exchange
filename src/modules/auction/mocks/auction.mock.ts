import { PaginateResult } from 'mongoose';
import { createMock } from '@golevelup/ts-jest';
import { Types } from 'mongoose';
import { AuctionCreateDto } from '../dtos';
import { IAuctionCreate, IBidCreate } from '../interfaces';
import { Auction } from '../schemas';
import { Bid } from '../schemas/subschemas/bid.schema';

const today = new Date();
const tomorrow = new Date(today);
const nextWeek = new Date(today);
tomorrow.setDate(tomorrow.getDate() + 1);
nextWeek.setDate(nextWeek.getDate() + 7);

export const userId = '5ea84078e0405c3733ecf4d4';

export const bidderId = '5eb15526c0d1042a94e5f8f7';

export const auctionId = '5f19639b42a14d22c388cec4';

export const auctionCreateDto: AuctionCreateDto = {
  debtsForSale: ['5e5f90964bf60336c4dd1340', '5e6f45dfd9805cf210617119'],
  auctionEndTime: nextWeek,
  startingPrice: 2000.0,
  buyNowPrice: 3000.0,
};

export const iAuctionCreate: IAuctionCreate = {
  socketAuctionId: 'some autogenerated id',
  auctionFounder: userId,
  debtsForSale: ['5e5f90964bf60336c4dd1340', '5e6f45dfd9805cf210617119'],
  auctionEndTime: nextWeek,
  startingPrice: 2000.0,
  buyNowPrice: 3000.0,
};

export const newAuction = createMock<Auction>({
  _id: new Types.ObjectId() as any,
  socketAuctionId: 'some autogenerated id',
  auctionFounder: new Types.ObjectId(userId),
  debtsForSale: [
    new Types.ObjectId('5e5f90964bf60336c4dd1340'),
    new Types.ObjectId('5e6f45dfd9805cf210617119'),
  ],
  auctionEndTime: nextWeek,
  bidHistory: [],
  startingPrice: 2000.0,
  buyNowPrice: 3000.0,
});

export const paginatedAuctions = createMock<PaginateResult<Auction>>({
  docs: [
    {
      _id: new Types.ObjectId() as any,
      socketAuctionId: 'some autogenerated id 1',
      auctionFounder: new Types.ObjectId(userId),
      debtsForSale: [
        new Types.ObjectId('5e5f90964bf60336c4dd1340'),
        new Types.ObjectId('5e6f45dfd9805cf210617119'),
      ],
      auctionEndTime: nextWeek,
      startingPrice: 2000.0,
      buyNowPrice: 3000.0,
    },
    {
      _id: new Types.ObjectId() as any,
      socketAuctionId: 'some autogenerated id 2',
      auctionFounder: new Types.ObjectId(userId),
      debtsForSale: [
        new Types.ObjectId('5eb25c14f0355f176e61aa75'),
        new Types.ObjectId('5eb178be3ca0c537f8e784a5'),
      ],
      auctionEndTime: nextWeek,
      startingPrice: 3000.0,
      buyNowPrice: 4000.0,
    },
    {
      _id: new Types.ObjectId() as any,
      socketAuctionId: 'some autogenerated id 3',
      auctionFounder: new Types.ObjectId(userId),
      debtsForSale: [
        new Types.ObjectId('5eb17850b1ab2c37c3170f5d'),
        new Types.ObjectId('5eb17759bfd42937744f4753'),
      ],
      auctionEndTime: nextWeek,
      startingPrice: 4000.0,
      buyNowPrice: 5000.0,
    },
  ],
  hasNextPage: false,
  hasPrevPage: false,
  limit: 20,
  pagingCounter: 1,
  totalDocs: 3,
  totalPages: 1,
});

export const iBidCreate: IBidCreate = {
  bidder: bidderId,
  bidPrice: 2500.0,
  bidTimestamp: tomorrow,
};

export const newBid = createMock<Bid>({
  _id: new Types.ObjectId() as any,
  bidder: new Types.ObjectId(bidderId),
  bidPrice: 2500.0,
  bidTimestamp: tomorrow,
});

export const bids = createMock<Bid[]>([
  {
    _id: new Types.ObjectId() as any,
    bidder: new Types.ObjectId(bidderId),
    bidPrice: 2500.0,
    bidTimestamp: tomorrow,
  },
  {
    _id: new Types.ObjectId() as any,
    bidder: new Types.ObjectId(bidderId),
    bidPrice: 2600.0,
    bidTimestamp: tomorrow,
  },
  {
    _id: new Types.ObjectId() as any,
    bidder: new Types.ObjectId(bidderId),
    bidPrice: 2700.0,
    bidTimestamp: tomorrow,
  },
]);
